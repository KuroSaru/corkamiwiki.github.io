#summary un résumé des astuces PDF tricks - encodages, structures, javascript...

Ceci est un résumé des astuces du format PDF, qu'elles soient basées sur l'encodage, le javascript, ou la structure PDF.

DISCLAIMER: The files are clean, and hand written by me, for better understanding and perfect clarity. However, because they use various tricks also present in malwares, they might be detected by your antivirus, or crash your usual program. They all work under Adobe Acrobat though, which is the point here.
AVERTISSEMENT: les fichiers sont sains, écris à la main, pour une meilleur compréhension et une clarté totale. Cependant, comme ils utilisent des astuces diverses présentes dans les virus, ils pourraient être détectés par votre antivirus, ou faire planter vos programmes habituels. Cela dit, ils marchent tous sous Adobe Acrobat, ce qui est le but ici.

 En clair: ils sont bizarres, mais ils marchent, et ils sont propres.
 
pour encore plus d'astuces Javascript, allez voir le site [http://bonsaiden.github.com/JavaScript-Garden/ JavaScript Garden]

pour télécharger directement, allez voir [http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/ le répertoire SVN]

=encodages=
toutes les données (ou chaînes) peuvent être encodées de diverses façons.

==hex==
une chaîne peut être stockée en hexadécimal.

 Example de chaîne `Hello World!`, avec chaque caractère encodé par sa valeur en hexadécimal ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/encode-hex.pdf télécharger]):
{{{
48656c6c6f20576f726c6421
}}}

==octal==
un autre classique, où chaque caractêre est stocké en octal.

 Example de chaîne `Hello World!`, avec chaque caractère encodé par sa valeur en octal ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/encode-octal.pdf télécharger]):
{{{
\110\145\154\154\157\40\127\157\162\154\144\41\
}}}

==espaces entre les chiffres==
jusque là, rien d'inattendu. Mais ça ne serait pas Adobe si nous en restions là ;)

Alors qu'il est habituel de séparer les nombres hexadécimaux par une espace (`00 01 02...`), dans un PDF, n'importe quel caractère vide peut être utilisé (tab, retour à la ligne), et même entre les 2 chiffres d'un seul nombre.

 Example de chaîne `Hello World!`, avec des caractères vides entre les chiffres ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/encode-hex-with-space.pdf télécharger]):
{{{
4
8
6


     5
6	c 6c 6f 		20



576f726c6421
}}}

==retours à la ligne en Ascii==
les chaînes Ascii peuvent être stockées telles quelles (miracle !), mais des retours à la lignes - qui seront ignorés - peuvent être insérés également...

 Example de chaîne `Hello World!`, stockée en Ascii, avec des retours à la ligne superflus  ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/encode-newline.pdf télécharger]):
{{{
[...]
}\
\
\
\
\
\
\
H\
e\
l\
\
\
\
\
\
l\
o\
 \
[...]
}}}

=structure=
==signature d'en-tête tronquée==
Théoriquement égale à `%PDF-1.[4-6]`, la signature peut être tronquée pour ignorer le dernier chiffre.

 Exemple de signature d'en-tête tronquée  ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/signature-shorter.pdf télécharger]):
{{{
%PDF-1.
}}}

==signature nulle==
mais elle peut être encore plus courte, à condition d'insérer un caractêre nul.

 Exemple de signature d'en-tête tronquée, avec caractère nul  ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/signature-null.pdf télécharger])
{{{
%PDF-\0
}}}

==arbre de noms==
Un PDF peut contenir un arbre de noms (`Names`), dont chaque élément sera évalué séquentiellement. Ainsi, un script peut être coupé en plusieurs morceaux, et sans déclenchement évident tel que !OpenAction.

 Exemple de script !JavaScript, coupé en 2 dans un arbre de noms  ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/structure-names.pdf télécharger]):
{{{
[...]
  /Names
[...]
       /Names[
            (1) <<
[...]
                  msg = "Hello";
[...]
            (2) <<
[...]
                  msg = msg + " World!";
                  app.alert(msg);
[...]
}}}

==sans object==
Avec Acrobat X, un PDF valide n'a pas besoin d'objet.

 Exemple de PDF valide (sous Acrobat X) de 36 octets, fait d'un `trailer` uniquement ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/emptyX.pdf télécharger]):
{{{
%PDF-\0trailer<</Root<</Pages<<>>>>>>
}}}

Cette astuce ne marche pas sous les versions précédentes d'Acrobat. Pour elles, un objet - même vide, et sans index - doit être présent.

 Exemple de PDF valide (Sous Acrobat <= 9) de 48 octets ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/empty.pdf télécharger]):
{{{
%PDF-\0obj<<>>trailer<</Root<</Pages<<>>>>>>
}}}

==tags incorrects==
Les tags inattendus sont simplement ignorés, ainsi que ceux avec des majuscules/minuscules incorrects.

 Exemple de `trailer` avec des tags incorrects ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/structure-wrongcase.pdf télécharger]):
{{{
trailer
<<
/Root
    <</tYpE/caTaLOG/Pages 1 0 R>>
>>
}}}

==EOF==
Le PDF est un format qui gère les mises-à-jours incrémentales, donc l'information peut être écrite au dela du %%EOF.

 Exemple de PDF ou les objets et le `trailer` sont écris après le %%EOF ([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/structure-ignoredeof.pdf télécharger]):
{{{
[...]
%%EOF
             
% objet bidon pour rendre le PDF valide
[...]
15 0 obj
[...]
% le trailer ne doit pas être avant les autres objets
trailer
<<
/Root<</Pages 1 0 R>>
>>

1 0 obj
<</Kids[<</Parent 1 0 R/Contents[2 0 R]>>]
[...]

2 0 obj
<<>>
stream
BT/default 20 Tf 1 0 0 1 1 715 Tm(this text and the PDF objects are stored beyond the %%EOF tag)Tj ET
[...]
}}}
==linearized==
les PDF sont parcourus par défaut de bas en haut, sauf si le premier objet (même un objet bidon sans référence) contient le tag /Linearized tag (avec une valeur quelconque)

 Exemple de PDF parcouru au choix de bas en haut ou de haut en bas (si `linearized`)  ([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/structure-parsingdirection.pdf télécharger]):
{{{
[...]
% insérer/supprimer un objet vide changera la direction d'analyse
12 0 obj <<<>>
[...]
31415 0 obj 
<< /Linearized -42 >>
endobj
[...]
2 0 obj
<<>>
stream
BT/default 35 Tf 1 0 0 1 1 715 Tm(this PDF has been parsed top-down)Tj ET
endstream
endobj
[...]
20 0 obj
<<>>
stream
BT/default 35 Tf 1 0 0 1 1 715 Tm(this PDF has been parsed bottom-up)Tj ET
endstream
endobj
[...]
% si ce trailer est pris en compte, 'Top-down' sera affiché
trailer
<<
/Root
  <<
  /Pages 1 0 R
  >>
>>
[...]
% si ce trailer est pris en compte, 'Bottom-up' sera affiché
trailer
<<
/Root
  <<
  /Pages 10 0 R
  >>
>> 
}}}

=encodage en !JavaScript=
Voici quelques autres astuces d'encodages, qui utilisent !JavaScript (pas forcément spécifique à Acrobat)
==concaténation==
l'astuce la plus simple de toute est de couper la chaîne en morceaux, et de les reconcaténer ensuite.

 Exemple de chaîne `Hello World!`, où elle est reconstruite avant affichage ([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/js-concat.pdf télécharger]):
{{{
[...]
      B="Hell";
      on="o ";
      jour="World!";
      app.alert(B + on + jour);
[...]
}}}

==cherche et remplace==
une simple technique de dissimulation: ajouter des caractères superflus, et les supprimer/remplacer avant utilisation.

 Exemple de chaîne `Hello World!`, dissimulées avec des caractères superflus  ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/js-replace.pdf télécharger]):
{{{
"zHzzezzlzlzozzzzz zWozrzldz!").replace(/z/g,"")
}}}

==échappement==
une autre technique standard en !JavaScript: remplacer les caractères par leur équivalent encodé.

 Exemple de chaîne `Hello World!`, encodée par échappement  ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/js-unescape.pdf télécharger]):
{{{
unescape("%48%65%6C%6C%6F%20%57%6F%72%6C%64%21")
}}}

==encodage en base numérique==
De même que CAFEBEBE peut être, lu soit comme un mot, soit comme un chiffre en hexa, n'importe quel mot en majuscule peut être écrit en base 32 (32 ou moins, en fonction du dernier caractère de l'alphabet dont on a besoin).

 Exemple de chaîne `HELLO WORLD!`, où chaque mot est encodé comme un nombre, dans une base différente à chaque fois  ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/js-number.pdf télécharger]):
{{{
(6873049).toString(25) + " " + (38842069).toString(33) + "!"
}}}

=astuces !JavaScript=
==eval==
Une classique: du code peut être construit dans une chaîne, qui est executée par évaluation.

 Exemple de chaîne de code executée ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/js-eval.pdf télécharger]):
{{{
[...]
     eval('app.alert("Hello World!");');
[...]
}}}

==sous-chaîne==
Une fonction telle qu'_alert_ peut être appelée, pas seulement directement, mais aussi en tant que sous-chaîne de son objet parent, _app_ dans notre cas.

 Exemple de fonction !JavaScript, appelée par référence depuis son parent  ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/js-substring.pdf télécharger]):
{{{
[...]
     app["alert"]("Hello World!");
[...]
}}}

==tableau==
L'example précédent peut être amélioré avec un faux tableau et de fausses entrées, ce qui rendra la fonction exécutée plus difficile à distinguer.

 Exemple de chaîne de code évaluée via une référence dans un faux tableau  ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/js-array.pdf télécharger]):
{{{
[...]
     e = ("fake1")[("fake2", "eval")]
     e('app.alert("Hello World!");');
[...]
}}}

==appelé==
Une fonction !JavaScript peut accéder à son propre code, et l'utiliser comme bon lui semble. Donc, n'importe quelle modification du code peut empêcher la fonction de marcher correctement: en général, une telle fonction utilise son code comme une clef de décryptage.

 Exemple de fonction de décryptage, qui utilise son propre code comme clef de décryptage ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/js-callee.pdf télécharger]):
{{{
[...]
      function decrypt(cipher) 
[...]
            key = arguments.callee.toString();
[...]
            return plaintext;
}
[...]
      app.alert(decrypt(unescape(".%10%02%0F%1BI8%01R%08%01B")));
[...]
}}}

=!JavaScript + PDF=

ces astuces cachent de l'information dans l'un des composants du PDF, et récupèrent cette information via !JavaScript.

==info==
Un `trailer` du PDF peut contenir un dictionnaire `Info`, dont le contenu des éléments peut être obtenu en  !Javascript par les propriétés de l'objet `info`.

 Exemple de chaîne stockée comme éléments du dictionnaire `Info` du `trailer`  ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/js-info.pdf télécharger]):
{{{
[...]
      /Info <</Author(Hello) /Title( World) /Producer( !)>>
[...]
      app.alert(info.author + info.title + info.producer);
[...]
}}}

==annots==
De manière similaire, une page peut contenir un commentaire, qui peut être récupéré par la fonction `getAnnots` sur la page en question.

 Exemple de chaîne stockée comme sujet d'un commentaire sur une page spécifique ([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/js-annots.pdf télécharger]):
{{{
[...]
    /Annots
[...]
         /Subj (Hello World!)
[...]
      d = app.doc;
      d.syncAnnotScan();
      a = d.getAnnots({ nPage: 0 });
      app.alert(a[0].subject);
[...]
}}}

==getfield==
un Widget !AcroForm peut contenir des données et des valeurs, qui peuvent être récupérées via la fonction `getField`.


 Exemple de chaîne stockée dans un Widget !AcroForm  ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/js-getfield.pdf télécharger]):
{{{
[...]
  /AcroForm
[...]
        /Subtype/Widget
        /T(mydata)        % this is the name
        /V(Hello World!)  % this is the value
[...]
      app.alert(this.getField('mydata').value);
[...]
}}}

==anti-émulateurs==
En plus du !JavaScript standard, il est possible via des particularités spécifiques à Adobe Acrobat, de detecter si on est ou non dans l'application réelle ou dans un émulateur.
===valeurs défaut===
Des variables globales ont des valeurs par défaut sécifiques, donc comparer la valeur de ces variables dès l'initialisation peut permettre de détecter un émulateur.

 Exemple de code Acrobat !JavaScript qui vérifie des valeurs initiales pour en faire un anti-émulateur  ([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/js-trick-initvalues.pdf télécharger]):
{{{
[...]
      if ((app)
        && (event.target.zoomType.toString() == 'FitPage'))
[...]
}}}

===variables globales===
les variables globales se comportent différement des autres: même si on leur assigne une valeur, elles gardent leur type original (ce qui défie le bon sens).

 Exemple de code Acrobat !Javascript, qui définit une variable globale, et compare ensuite le résultat  ([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/js-trick-globals.pdf télécharger]):
{{{
[...]
      hidden=0;  // global
      hidden_=0; // not global
      if ((hidden_ === 0) && (hidden !== 0)) 
          app.alert("nothing unusual detected.");
[...]
}}}

<wiki:comment>
== ==

 Exemple de chaîne `Hello World!` string, encodée avec  ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/ télécharger]):
{{{
}}}
</wiki:comment>

=PDFs Minimaux=
voir ci-dessus pour des PDFs valides le plus petit possible - mais ne contenant rien.
==avec une page==
Pour que le PDF ait une page, il faut qu'un objet, définissant un enfant comme son propre parent, doit être référencé dans `trailer/Root/Pages`.

 Exemple (complet) de PDF minimal, avec une page ([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/blankpage.pdf télécharger]):
{{{
%PDF-\01 0 obj<</Kids[<</Parent 1 0 R>>]>>trailer<</Root<</Pages 1 0 R>>>>
}}}

==Page + Text==
Pour définir un texte, cette page doit avoir des ressources (vides), et un contenu, qui défini le texte lui-même..

 Exemple complet de PDF minimal, avec page et texte (pour Acrobat <=9)  ([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/helloworld.pdf télécharger]):
{{{
%PDF-\01 0 obj<</Kids[<</Parent 1 0 R/Contents[2 0 R]>>]/Resources<<>>>>2 0 obj<<>>stream
BT/default 99 Tf 1 0 0 1 1 715 Tm(Hello World!)Tj ET
endstream
trailer<</Root<</Pages 1 0 R>>>>
}}}

Notez que cet objet n'a pas de tag `endobj`. Ceci est requis sous Acrobat X.

 Exemple complet de PDF minimal, avec page et texte (pour Acrobat X)  ([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/helloworld-X.pdf télécharger]):
{{{
%PDF-\01 0 obj<</Kids[<</Parent 1 0 R/Contents[2 0 R]>>]/Resources<<>>>>2 0 obj<<>>stream
BT/default 99 Tf 1 0 0 1 1 715 Tm(Hello World!)Tj ET
endstream
endobj
trailer<</Root<</Pages 1 0 R>>>>
}}}

==!JavaScript==
Pour utiliser le !JavaScript, un PDF a besoin d'être comme l'exemple de PDF vide, et d'un dictionnaire !OpenAction dans son `trailer/root`.

 Exemple complet de PDF minimal, utilisant !JavaScript, sous Acrobat <= 9:  ([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/helloworld_js.pdf télécharger]):
{{{
%PDF-\0obj<<>>trailer<</Root<</Pages<<>>/OpenAction<</S/JavaScript/JS(app.alert('Hello World!');)>>>>>>
}}}

 Exemple équivalent, sous Acrobat X  ([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/helloworld_js_X.pdf télécharger]):
{{{
%PDF-\0trailer<</Root<</Pages<<>>/OpenAction<</S/JavaScript/JS(app.alert('Hello World!');)>>>>>>
}}}


=Flux corrompus=
Si un flux compressé avec !FlatEncode est tronqué ou corrompu, il sera pris tel quel - jusqu'à l'erreur - et quand même interprété (en général, des données compressées incorrectes seraient tout simplement ignorées).

Une manière simple d'avoir le flux corrompu décompressé exactement comme Acrobat l'aurait fait est justement de le faire faire par Acrobat, en greffant le flux dans un modèle (_template_) où il sera interprété comme une pièce jointe. Ainsi, c'est Acrobat qui décompressera le flux, quand on demandera d'extraire la pièce jointe: ([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/attachstream.py script de greffe] + [http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/structure-attached.pdf modèle avec pièce jointe])

=Références=
 * [http://blog.didierstevens.com/2008/04/29/pdf-let-me-count-the-ways/ Didier Stevens]
 * [http://www.symantec.com/connect/blogs/portable-document-format-malware Kazumasa Itabashi]
 * [http://blog.zynamics.com/2010/07/13/recon-slides-how-to-really-obfuscate-your-pdf-malware/ Sebastian Porst]