#summary PDF tricks - encodings, structures, javascript
first draft, in progress

Here are various PDF tricks, either based on data encodings, javascript, or PDF structures.

=encodings=
any string can be encoded in various ways.
==hex==
naturally, a string can be stored as hex

 Example of _Hello World!_ string, with each character encoded by its value in hexadecimal ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/encode-hex.pdf download]):
{{{
48656c6c6f20576f726c6421
}}}

==octal==
another classic one, each character is encoded in octal.

 Example of _Hello World!_ string, with each characters encoded by its value in octal ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/encode-octal.pdf download]):
{{{
\110\145\154\154\157\40\127\157\162\154\144\41\
}}}

==whitespaces between nibbles==
so far so good, nothing too weird. However, it woudln't be Adobe if something wasn't unexpected.

When data is hex-encoded, the characters, even the nibbles of each hex characters, can be separated via any whitespace (tabs, space, new line, etc...).

 Example of _Hello World!_ string, encoded as hexadecimal, with extra whitespace between the nibbles ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/encode-hex-with-space.pdf download]):
{{{
4
8
6


     5
6	c 6c 6f 		20



576f726c6421
}}}

==ascii newlines==
Ascii can be stored as ascii (hopefully), but newlines can be inserted too...

 Example of _Hello World!_ string, stored as ASCII, with extra new lines characters. ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/encode-newline.pdf download]):
{{{
[...]
}\
\
\
\
\
\
\
H\
e\
l\
\
\
\
\
\
l\
o\
 \
[...]
}}}

=structure=
==truncated signature==
theorically `%PDF-1.[4-6]`, the signature can be truncated to ignore the last digit.

 Example of truncated header signature ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/signature-shorter.pdf download]):
{{{
%PDF-1.
}}}

==null signature==
but it can be actually even shorter, provided you insert a null character. ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/signature-null.pdf download])

 Example of null-based header trick:
 {{{
%PDF-\0
}}}

==Names tree==
javascript split in various part

no obvious trigger

==no object number==

==no endobj==
no `endobj` tag

not valid on Acrobat X anymore

==no object content==
{{{
obj
trailer
[...]
}}}

==no object==
on Acrobat X, a valid PDF doesn't need an object.

 Example of a valid trailer-only, 36 bytes PDF, under Acrobat X:
{{{
%PDF-\0trailer<</Root<</Pages<<>>>>>>
}}}

this trick doesn't work on previous version of Acrobat. For them, an object - even empty, and with no index - has to be present.

 Example of a valid, 48 bytes PDF, for Acrobat <=9:
{{{
%PDF-\0obj<<>>trailer<</Root<</Pages<<>>>>>>
}}}

==wrong tags==
unexpected tags are just ignored. this goes the same for tags with incorrect case.

 Example of a trailer with incorrectly cased tags ([download]:
{{{
trailer
<<
/Root
    <</tYpE/caTaLOG/Pages 1 0 R>>
>>
}}}

==EOF==
PDF is a format that supports incremental updates, so information can be written beyond the %EOF.

==linearized==


=javascript-based encodings=
Here are a few other encoding tricks, that use javascript (not necessarily specific to Acrobat's)
==replace==
simple obfuscation, add some extra character/switch then replace/restore them before use.

 Example of _Hello World!_ string, obfuscated with extra characters ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/js-replace.pdf download]):
{{{
"zHzzezzlzlzozzzzz zWozrzldz!").replace(/z/g,"")
}}}

==escaping==
another standard javascript obfuscation, replace characters with escaped ones.

 Example of _Hello World!_ string, encoded with javascript escaping ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/js-unescape.pdf download]):
{{{
unescape("%48%65%6C%6C%6F%20%57%6F%72%6C%64%21")
}}}

==base encoding==
like CAFEBABE can be read as a word or as a hex number, any uppercase word can be written as a base32 (32 or less, depending on the last (in the alphabet) used character) numbers. 

 Example of _HELLO WORLD!_ string, encoded as numbers with a different base ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/js-number.pdf download]):
{{{
(6873049).toString(25) + " " + (38842069).toString(33) + "!"
}}}

==concatenation==
{{{
[...]
      B="Hell";
      on="o ";
      jour="World!";
      app.alert(B + on + jour);
[...]
}}}

=!JavaScript-based tricks=
==eval==
A classic: some code can be built in a string, then executed via evaluation.

 Example of a string of code being evaluated ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/js-eval.pdf download]):
{{{
[...]
     eval('app.alert("Hello World!");');
[...]
}}}

==substring==
A function such as _alert_ can be called, not only directly, but also as a substring of its parent object, _app_ in our example.

{{{
[...]
     app["alert"]("Hello World!");
[...]
}}}

==array==
the previous example can be extended with a fake array with fake entries, which makes the actual executed function harder to spot.

{{{
[...]
     e = ("fake1")[("fake2", "eval")]
     e('app.alert("Hello World!");');
[...]
}}}

=!JavaScript + PDF=

these tricks are hiding some information in one of the various component of the PDF, and retrieving that information via !Javascript.

==info==

{{{
[...]
      /Info <</Author(Hello) /Title( World) /Producer( !)>>
[...]
      app.alert(info.author + info.title + info.producer);
[...]
}}}

==annots==

{{{
[...]
    /Annots
[...]
         /Subj (Hello World!)
[...]
      d = app.doc;
      d.syncAnnotScan();
      a = d.getAnnots({ nPage: 0 });
      app.alert(a[0].subject);
[...]
}}}

==getfield==
An !AcroForm Widget can contain some data and value, which can be retrieved via the getField function.


 Example of a string stored in an !AcroForm Widget ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/js-getfield.pdf download]):
{{{
[...]
  /AcroForm
[...]
        /Subtype/Widget
        /T(mydata)        % this is the name
        /V(Hello World!)  % this is the value
[...]
      app.alert(this.getField('mydata').value);
[...]
}}}

==callee==
A !JavaScript function can access its own code, and use it for anything. Thus any modification might prevent the function to work correctly: typically, such functions use their code as a key for some decryption.

 Example of a decryption function, using its own code as decryption key ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/js-callee.pdf download]):
{{{
[...]
      function decrypt(cipher) 
[...]
            key = arguments.callee.toString();
[...]
            return plaintext;
}
[...]
      app.alert(decrypt(unescape(".%10%02%0F%1BI8%01R%08%01B")));
[...]
}}}

==initial values==
some Adobe specific global variables are initialized with default values, checking them might stop an emulator

{{{
[...]
      if ((app)
        && (event.target.zoomType.toString() == 'FitPage'))
[...]
}}}

==global variables==
global variables show a different behavior as opposed to normal ones:
{{{
[...]
      hidden=0;  // global
      hidden_=0; // not global
      if ((hidden_ === 0) && (hidden !== 0)) 
          app.alert("nothing unusual detected.");
[...]
}}}

<wiki:comment>
== ==

 Example of _Hello World!_ string, encoded with ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/ download]):
{{{
}}}
</wiki:comment>

=References=
 * [http://blog.didierstevens.com/2008/04/29/pdf-let-me-count-the-ways/ Didier Stevens]
 * [http://www.symantec.com/connect/blogs/portable-document-format-malware Kazumasa Itabashi]
 * [http://blog.zynamics.com/2010/07/13/recon-slides-how-to-really-obfuscate-your-pdf-malware/ Sebastian Porst]