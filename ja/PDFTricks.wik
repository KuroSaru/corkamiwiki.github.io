#summary un resume des astuces PDF - encodages, structures, JavaScript...


このページは,エンコード,JavaScript,PDFの構造を基本にしたPDFフォーマットのトリックについてのレジュメです.

注意：リンクのファイルはクリーンで,わかりやすいように私自身によって作成されたものです.しかしながら,各種のウィルスに見受けられる様々なトリックを使っているため,お使いのアンチウィルスに検出されたり,通常使用しているプログラムをクラッシュさせる可能性があります.が,Adobe Acrobat以下では機能し,それがここでの目的であります.

 早い話が,これらのファイルは一風変わってますが,機能はするもので,無害です.
JavaScriptのトリックについてさらに知りたい方はこちら： [http://bonsaiden.github.com/JavaScript-Garden/ JavaScript Garden].

直接ダウンロードするにはこちら： [http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/ フォルダ SVN].

=エンコード=

全てのデータ（又は文字列）は様々な方法でエンコードすることができます.

==16進法==

文字列は16進法で格納されます.
 各文字が16進法の値でエンコードされた文字列`Hello World!`の例 ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/encode-hex.pdf ダウンロード]):
{{{
48656c6c6f20576f726c6421
}}}

==8進法==

別の古い方法では各文字は8進法で格納されます.
 各文字がそれぞれ8進法の値によってエンコードされた文字列`Hello World!`の例
 ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/encode-octal.pdf ダウンロード]):
{{{
\110\145\154\154\157\40\127\157\162\154\144\41\
}}}

==数値間のスペース==

ここまでは何も驚くべきことはないです.が,ここで終わってはAdobeではありません.

通常16進法の値はスペースで区切りますが(`00 01 02...`),PDFではタブや改行のような空白の文字や,1つの数値における2つの数字間ですら使えます.
 数字間の空白を使って16進法でエンコードされた文字列 `Hello World!` の例 ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/encode-hex-with-space.pdf ダウンロード]):
{{{
4
8
6


     5
6	c 6c 6f 		20



576f726c6421
}}}

==Asciiにおけるエンタ==
Asciiの文字列はどんなものでも格納されますが,エンタも同様に付け加えられます.
 無用のエンタを使ってAsciiで格納された文字列 `Hello World!`　の例  ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/encode-newline.pdf ダウンロード]):
{{{
[...]
}\
\
\
\
\
\
\
H\
e\
l\
\
\
\
\
\
l\
o\
 \
[...]
}}}

=構造=
==切り取ったヘッダのタイトル==
原則としてヘッダは`%PDF-1.[4-6]`ですが,後半の数字を無視して切り取ることができます.
 ヘッダを切り取った例  ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/signature-shorter.pdf ダウンロード]):
{{{
%PDF-1.
}}}

==値のないヘッダ==
値のない文字を使ったヘッダはもっと短くなります.
 値のない文字を使って切り取ったヘッダの例  ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/signature-null.pdf ダウンロード]):
{{{
%PDF-\0
}}}

==名前ツリー（Name Trees）==
PDFは名前ツリー（Name Trees）も含み,それぞれ構成するものは連続して実行されます.　したがって,!OpenActionのように明確なトリガなしで1つのスクリプトは複数に分割されます.　　

 名前ツリー内で2つに分割されたスクリプト!JavaScript　の例  ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/structure-names.pdf ダウンロード]):
{{{
[...]
  /Names
[...]
       /Names[
            (1) <<
[...]
                  msg = "Hello";
[...]
            (2) <<
[...]
                  msg = msg + " World!";
                  app.alert(msg);
[...]
}}}

==オブジェクトなし==
Avec Acrobat X, un PDF valide n'a pas besoin d'objet.
Acrobat Xでは,有効なPDFはオブジェクトを必要としません.
Acrobat X上における,`trailer`とだけ書かれた36バイトの有効なPDFの例　？？？？
 Exemple de PDF valide (sous Acrobat X) de 36 octets, fait d'un `trailer` uniquement ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/emptyX.pdf ダウンロード]):
{{{
%PDF-\0trailer<</Root<</Pages<<>>>>>>
}}}

Cette astuce ne marche pas sous les versions précédentes d'Acrobat. Pour elles, un objet - même vide, et sans index - doit être présent.
このトリックは以前のバージョンのAcrobatでは動きません.古いバージョンでは空のインデックスのないものでもオブジェクトが必要になります.？？？？


48バイトの有効なPDFの例（Acrobat 9もしくはそれ以下） ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/empty.pdf ダウンロード]):
{{{
%PDF-\0obj<<>>trailer<</Root<</Pages<<>>>>>>
}}}

==間違ったタグ==
Les tags inattendus sont simplement ignorés, ainsi que ceux avec des majuscules/minuscules incorrects.
大文字/小文字の間違いのような予想外のタグは無視されます.

間違ったタグを使用した`trailer` の例
 Exemple de `trailer` avec des tags incorrects ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/structure-wrongcase.pdf ダウンロード]):
{{{
trailer
<<
/Root
    <</tYpE/caTaLOG/Pages 1 0 R>>
>>
}}}

==EOF==
PDFは増加するアップデートを管理するフォーマットなので,その情報はEOFを超えて書かれる場合もあります.？？？？
Le PDF est un format qui gère les mises-à-jours incrémentales, donc l'information peut être écrite au dela du %%EOF.

 Exemple de PDF ou les objets et le `trailer` sont écris après le %%EOF ([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/structure-ignoredeof.pdf ダウンロード]):
{{{
[...]
%%EOF
             
% objet bidon pour rendre le PDF valide
[...]
15 0 obj
[...]
% le trailer ne doit pas être avant les autres objets
trailer
<<
/Root<</Pages 1 0 R>>
>>

1 0 obj
<</Kids[<</Parent 1 0 R/Contents[2 0 R]>>]
[...]

2 0 obj
<<>>
stream
BT/default 20 Tf 1 0 0 1 1 715 Tm(this text and the PDF objects are stored beyond the %%EOF tag)Tj ET
[...]
}}}
==linearized==　線形？？？
PDFは,最初のオブジェクトがレファレンスのない見せかけのオブジェクトであっても,どんな値であれタグ/線形タグを含む場合を除いて,デフォルトで下から上へ解析します
les PDF sont parcourus par défaut de bas en haut, sauf si le premier objet (même un objet bidon sans référence) contient le tag /Linearized tag (avec une valeur quelconque).

下から上又は上から下のどちらかで解析されるPDFの例　？？？
 Exemple de PDF parcouru au choix de bas en haut ou de haut en bas (si `linearized`)  ([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/structure-parsingdirection.pdf ダウンロード]):
{{{
[...]
% insérer/supprimer un objet vide changera la direction d'analyse
12 0 obj <<<>>
[...]
31415 0 obj 
<< /Linearized -42 >>
endobj
[...]
2 0 obj
<<>>
stream
BT/default 35 Tf 1 0 0 1 1 715 Tm(this PDF has been parsed top-down)Tj ET
endstream
endobj
[...]
20 0 obj
<<>>
stream
BT/default 35 Tf 1 0 0 1 1 715 Tm(this PDF has been parsed bottom-up)Tj ET
endstream
endobj
[...]
% si ce trailer est pris en compte, 'Top-down' sera affiché
trailer
<<
/Root
  <<
  /Pages 1 0 R
  >>
>>
[...]
% si ce trailer est pris en compte, 'Bottom-up' sera affiché
trailer
<<
/Root
  <<
  /Pages 10 0 R
  >>
>> 
}}}

JavaScriptにおけるエンコーディング
=encodage en !JavaScript=
ここではJavaScriptを使ったいくつかの別のエンコーディングのトリックを説明します.（Acrobatに限ったことではありません））
Voici quelques autres astuces d'encodages, qui utilisent !JavaScript (pas forcément spécifique à Acrobat).

==concaténation　連結==
最も簡単なトリックは文字列をいくつかに区切って再び連結することです.
L'astuce la plus simple de toute est de couper la chaîne en morceaux, et de les reconcaténer ensuite.

表示される前に再構築された`Hello World!`の例
 Exemple de chaîne `Hello World!`, où elle est reconstruite avant affichage ([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/js-concat.pdf ダウンロード]):
{{{
[...]
      B="Hell";
      on="o ";
      jour="World!";
      app.alert(B + on + jour);
[...]
}}}

==cherche et remplace　検索と置換==
ごまかす簡単なテクニックのひとつは,不必要な文字を追加し,使用前に削除/置換することです.　？？？
Une simple technique de dissimulation: ajouter des caractères superflus, et les supprimer/remplacer avant utilisation.

不必要な文字を使ってごまかした文字列`Hello World!`の例
 Exemple de chaîne `Hello World!`, dissimulées avec des caractères superflus  ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/js-replace.pdf ダウンロード]):
{{{
"zHzzezzlzlzozzzzz zWozrzldz!").replace(/z/g,"")
}}}

==échappementエスケープ==
JavaScriptにおける別の基本的なテクニックは,同等のエンコードによって文字を置き換えることです.
une autre technique standard en !JavaScript: remplacer les caractères par leur équivalent encodé.

エスケープによってエンコードされた文字列`Hello World!`の例
 Exemple de chaîne `Hello World!`, encodée par échappement  ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/js-unescape.pdf ダウンロード]):
{{{
unescape("%48%65%6C%6C%6F%20%57%6F%72%6C%64%21")
}}}

==encodage en base numérique==
De même que CAFEBEBE peut être, lu soit comme un mot, soit comme un chiffre en hexa, n'importe quel mot en majuscule peut être écrit en base 32 (32 ou moins, en fonction du dernier caractère de l'alphabet dont on a besoin).

 Exemple de chaîne `HELLO WORLD!`, où chaque mot est encodé comme un nombre, dans une base différente à chaque fois  ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/js-number.pdf ダウンロード]):
{{{
(6873049).toString(25) + " " + (38842069).toString(33) + "!"
}}}

=astuces !JavaScript=
==eval==
Une classique: du code peut être construit dans une chaîne, qui est exécutée par évaluation.

 Exemple de chaîne de code exécutée ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/js-eval.pdf ダウンロード]):
{{{
[...]
     eval('app.alert("Hello World!");');
[...]
}}}

==sous-chaîne==
Une fonction telle qu'_alert_ peut être appelée, pas seulement directement, mais aussi en tant que sous-chaîne de son objet parent, _app_ dans notre cas.

 Exemple de fonction !JavaScript, appelée par référence depuis son parent  ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/js-substring.pdf ダウンロード]):
{{{
[...]
     app["alert"]("Hello World!");
[...]
}}}

==tableau==
L'exemple précédent peut être amélioré avec un faux tableau et de fausses entrées, ce qui rendra la fonction exécutée plus difficile à distinguer.

 Exemple de chaîne de code évaluée via une référence dans un faux tableau  ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/js-array.pdf ダウンロード]):
{{{
[...]
     e = ("fake1")[("fake2", "eval")]
     e('app.alert("Hello World!");');
[...]
}}}

==appelé==
Une fonction !JavaScript peut accéder à son propre code, et l'utiliser comme bon lui semble. Donc, n'importe quelle modification du code peut empêcher la fonction de marcher correctement: en général, une telle fonction utilise son code comme une clef de décryptage.

 Exemple de fonction de décryptage, qui utilise son propre code comme clef de décryptage ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/js-callee.pdf ダウンロード]):
{{{
[...]
      function decrypt(cipher) 
[...]
            key = arguments.callee.toString();
[...]
            return plaintext;
}
[...]
      app.alert(decrypt(unescape(".%10%02%0F%1BI8%01R%08%01B")));
[...]
}}}

=!JavaScript + PDF=

ces astuces cachent de l'information dans l'un des composants du PDF, et récupèrent cette information via !JavaScript.

==info==
Un `trailer` du PDF peut contenir un dictionnaire `Info`, dont le contenu des éléments peut être obtenu en  !JavaScript par les propriétés de l'objet `info`.

 Exemple de chaîne stockée comme éléments du dictionnaire `Info` du `trailer`  ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/js-info.pdf ダウンロード]):
{{{
[...]
      /Info <</Author(Hello) /Title( World) /Producer( !)>>
[...]
      app.alert(info.author + info.title + info.producer);
[...]
}}}

==annots==
De manière similaire, une page peut contenir un commentaire, qui peut être récupéré par la fonction `getAnnots` sur la page en question.

 Exemple de chaîne stockée comme sujet d'un commentaire sur une page spécifique ([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/js-annots.pdf ダウンロード]):
{{{
[...]
    /Annots
[...]
         /Subj (Hello World!)
[...]
      d = app.doc;
      d.syncAnnotScan();
      a = d.getAnnots({ nPage: 0 });
      app.alert(a[0].subject);
[...]
}}}

==getfield==
un Widget !AcroForm peut contenir des données et des valeurs, qui peuvent être récupérées via la fonction `getField`.


 Exemple de chaîne stockée dans un Widget !AcroForm  ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/js-getfield.pdf ダウンロード]):
{{{
[...]
  /AcroForm
[...]
        /Subtype/Widget
        /T(mydata)        % this is the name
        /V(Hello World!)  % this is the value
[...]
      app.alert(this.getField('mydata').value);
[...]
}}}

==anti-émulateurs==
En plus du !JavaScript standard, il est possible via des particularités spécifiques à Adobe Acrobat, de détecter si on est ou non dans l'application réelle ou dans un émulateur.
===valeurs par défaut===
Des variables globales ont des valeurs par défaut spécifiques, donc comparer la valeur de ces variables dès l'initialisation peut permettre de détecter un émulateur.

 Exemple de code Acrobat !JavaScript qui vérifie des valeurs initiales pour en faire un anti-émulateur  ([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/js-trick-initvalues.pdf ダウンロード]):
{{{
[...]
      if ((app)
        && (event.target.zoomType.toString() == 'FitPage'))
[...]
}}}

===variables globales===
les variables globales se comportent différemment des autres: même si on leur assigne une valeur, elles gardent leur type original (ce qui défie le bon sens).

 Exemple de code Acrobat !JavaScript, qui définit une variable globale, et compare ensuite le résultat  ([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/js-trick-globals.pdf ダウンロード]):
{{{
[...]
      hidden=0;  // global
      hidden_=0; // not global
      if ((hidden_ === 0) && (hidden !== 0)) 
          app.alert("nothing unusual detected.");
[...]
}}}

<wiki:comment>
== ==

 Exemple de chaîne `Hello World!` string, encodée avec  ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/ ダウンロード]):
{{{
}}}
</wiki:comment>

=PDFs Minimaux=
voir ci-dessus pour des PDFs valides le plus petit possible - mais ne contenant rien.
==avec une page==
Pour que le PDF ait une page, il faut qu'un objet, définissant un enfant comme son propre parent, doit être référencé dans `trailer/Root/Pages`.

 Exemple (complet) de PDF minimal, avec une page ([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/blankpage.pdf ダウンロード]):
{{{
%PDF-\01 0 obj<</Kids[<</Parent 1 0 R>>]>>trailer<</Root<</Pages 1 0 R>>>>
}}}

==Page + Text==
Pour définir un texte, cette page doit avoir des ressources (vides), et un contenu, qui défini le texte lui-même..

 Exemple complet de PDF minimal, avec page et texte (pour Acrobat <=9)  ([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/helloworld.pdf ダウンロード]):
{{{
%PDF-\01 0 obj<</Kids[<</Parent 1 0 R/Contents[2 0 R]>>]/Resources<<>>>>2 0 obj<<>>stream
BT/default 99 Tf 1 0 0 1 1 715 Tm(Hello World!)Tj ET
endstream
trailer<</Root<</Pages 1 0 R>>>>
}}}

Notez que cet objet n'a pas de tag `endobj`. Ceci est requis sous Acrobat X.

 Exemple complet de PDF minimal, avec page et texte (pour Acrobat X)  ([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/helloworld-X.pdf ダウンロード]):
{{{
%PDF-\01 0 obj<</Kids[<</Parent 1 0 R/Contents[2 0 R]>>]/Resources<<>>>>2 0 obj<<>>stream
BT/default 99 Tf 1 0 0 1 1 715 Tm(Hello World!)Tj ET
endstream
endobj
trailer<</Root<</Pages 1 0 R>>>>
}}}

==!JavaScript==
Pour utiliser le !JavaScript, un PDF a besoin d'être comme l'exemple de PDF vide, et d'un dictionnaire !OpenAction dans son `trailer/root`.

 Exemple complet de PDF minimal, utilisant !JavaScript, sous Acrobat <= 9:  ([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/helloworld_js.pdf ダウンロード]):
{{{
%PDF-\0obj<<>>trailer<</Root<</Pages<<>>/OpenAction<</S/JavaScript/JS(app.alert('Hello World!');)>>>>>>
}}}

 Exemple équivalent, sous Acrobat X  ([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/helloworld_js_X.pdf ダウンロード]):
{{{
%PDF-\0trailer<</Root<</Pages<<>>/OpenAction<</S/JavaScript/JS(app.alert('Hello World!');)>>>>>>
}}}


=Flux corrompus=
Si un flux compressé avec !FlatEncode est tronqué ou corrompu, il sera pris tel quel - jusqu'à l'erreur - et quand même interprété (en général, des données compressées incorrectes seraient tout simplement ignorées).

Une manière simple d'avoir le flux corrompu décompressé exactement comme Acrobat l'aurait fait est justement de le faire faire par Acrobat, en greffant le flux dans un modèle (_template_) où il sera interprété comme une pièce jointe. Ainsi, c'est Acrobat qui décompressera le flux, quand on demandera d'extraire la pièce jointe: ([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/attachstream.py script de greffe] + [http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/structure-attached.pdf modèle avec pièce jointe])

=Références=
 * [http://blog.didierstevens.com/2008/04/29/pdf-let-me-count-the-ways/ Didier Stevens]
 * [http://www.symantec.com/connect/blogs/portable-document-format-malware Kazumasa Itabashi]
 * [http://blog.zynamics.com/2010/07/13/recon-slides-how-to-really-obfuscate-your-pdf-malware/ Sebastian Porst]